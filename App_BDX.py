import streamlit as st
import requests
import zipfile
import io

import pandas as pd
import plotly.express as px

# Ajouter un style CSS pour personnaliser les couleurs
def add_custom_styles():
    st.markdown(
        """
        <style>
        /* Couleur pour la barre lat√©rale */
        section[data-testid="stSidebar"] {
            background-color: #A8E6A3; /* Vert clair */
            color: black; /* Texte noir */
        }
        /* Alignement des √©l√©ments */
        .sidebar-content {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        /* Couleur des titres principaux */
        h1, h2, h3 {
            color: black;
        }
        </style>
        """,
        unsafe_allow_html=True
    )


# Appliquer le style personnalis√©
add_custom_styles()

# URLs des logos h√©berg√©s sur GitHub
logo_isup_url = "https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/Logo-ISUP.jpg"
logo_gov_url = "https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/gov.png"
 
try:
    # Charger le logo gov.br en haut, centr√©
    st.sidebar.markdown("<div style='text-align: center;'><img src='{}' width='100'></div>".format(logo_gov_url), unsafe_allow_html=True)

    # Ajouter le texte sous le logo gov.br
    st.sidebar.markdown("<h2 style='text-align: center; color: #004C29;'>Projet de Data Visualisation</h2>", unsafe_allow_html=True)
    st.sidebar.markdown("<h3 style='text-align: center; color: #004C29;'>Groupe BDX</h3>", unsafe_allow_html=True)
    st.sidebar.markdown("<p style='text-align: center; color: #004C29;'>BAENA Miguel</p>", unsafe_allow_html=True)
    st.sidebar.markdown("<p style='text-align: center; color: #004C29;'>DAKPOGAN Paul</p>", unsafe_allow_html=True)
    st.sidebar.markdown("<p style='text-align: center; color: #004C29;'>XU J√©r√©my</p>", unsafe_allow_html=True)

    # Ajouter le logo ISUP apr√®s les noms, centr√©
    st.sidebar.markdown("<div style='text-align: center;'><img src='{}' width='100'></div>".format(logo_isup_url), unsafe_allow_html=True)

except Exception as e:
    st.sidebar.error(f"Une erreur est survenue avec les logos : {e}")
 
# Charger les donn√©es
# Lien brut (raw)
zip_url = "https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/datavis_long_lat_with_grupo.zip"
# T√©l√©charger et d√©compresser
response = requests.get(zip_url)
zip_file = zipfile.ZipFile(io.BytesIO(response.content))
 
# Lire un fichier CSV sp√©cifique √† l'int√©rieur du ZIP
with zip_file.open('datavis_long_lat_with_grupo.csv') as file:
    data = pd.read_csv(file)
 
try:
    

    # V√©rifiez si les colonnes n√©cessaires existent
    required_columns = ['Region_Name', 'ANO_MODELO_Class', 'COBERTURA', 'INDENIZ', 'AGE_Group', 'COD_MODELO', 'SEXO']
    if not all(col in data.columns for col in required_columns):
        st.error("Certaines colonnes n√©cessaires sont manquantes dans vos donn√©es.")
    else:
        # Configuration des onglets
        tabs = st.tabs(["Introduction", "Composition du Portefeuille", "Analyses", "Cartographie", "Outil de Tarification", "Interpr√©tations des Mod√®les"])

        # **Onglet 1 : Introduction**
        with tabs[0]:
            st.title("Introduction")
            st.markdown("""
            Bienvenue dans ce projet de **Data Visualisation** d√©velopp√© par le groupe **BDX**. 
            Ce tableau de bord interactif est con√ßu pour analyser et explorer des donn√©es d'assurance au Br√©sil. 
            Voici un aper√ßu des diff√©rents onglets disponibles dans cette application :

            ### **1. Composition du Portefeuille**
            - Analyse des caract√©ristiques principales des polices d'assurance, notamment :
                - La r√©partition des clients par tranche d'√¢ge et sexe.
                - La r√©partition des types de couverture.
                - Le nombre d'√©l√©ments dans chaque groupe de v√©hicules.

            ### **2. Analyses**
            - Exploration visuelle des donn√©es √† travers :
                - L'indemnit√© totale par type de v√©hicule ou par groupe.
                - Les relations entre les causes de sinistres et les indemnit√©s (boxplot).
                - La distribution des indemnit√©s par type de couverture.

            ### **3. Cartographie**
            - Visualisation dynamique des donn√©es g√©ographiques :
                - Carte des nombres de sinistres par r√©gion.
                - Carte des co√ªts d'indemnit√©s par r√©gion.

            ### **4. Outil de Tarification**
            - Impl√©mentation de deux mod√®les **XGBoost** pour pr√©dire la fr√©quence et la s√©v√©rit√© respectivement.
                        
            ### **5. Interpr√©tations Mod√®les**
            - Cet onglet fournit une analyse des mod√®les pr√©dictifs en utilisant des outils tels que :
                - Les graphiques **SHAP** (SHapley Additive exPlanations) pour interpr√©ter les contributions des variables au mod√®le.
        
            Ce tableau de bord est une d√©monstration de l'application des outils de **data science**, **mod√©lisation** et **visualisation** dans le domaine des assurances. 
            Prenez le temps d'explorer chaque onglet pour une meilleure compr√©hension des donn√©es et des r√©sultats. üéâ
            """)

        # **Onglet 2 : Composition du Portefeuille**
        with tabs[1]:
            st.title("Composition du Portefeuille")
            col1, col2 = st.columns(2)

            # R√©partition par tranche d'√¢ge
            with col1:
                st.header("R√©partition par tranche d'√¢ge")
                age_distribution = data['AGE_Group'].value_counts().reset_index()
                age_distribution.columns = ['Tranche d\'√¢ge', 'Nombre']
                age_fig = px.bar(
                    age_distribution, 
                    x='Tranche d\'√¢ge', 
                    y='Nombre', 
                    title="R√©partition par tranche d'√¢ge",color_discrete_sequence=["#6EAA6B"]
                )
                st.plotly_chart(age_fig, use_container_width=True)

            # R√©partition par sexe
            with col2:
                st.header("R√©partition par sexe")
                gender_distribution = data['SEXO'].value_counts().reset_index()
                gender_distribution.columns = ['Sexe', 'Nombre']
                gender_fig = px.pie(
                    gender_distribution, 
                    names='Sexe', 
                    values='Nombre', 
                    title="R√©partition par sexe", color='Sexe',  # D√©finir les couleurs sp√©cifiques
                    color_discrete_map={
                'M': '#A8E6A3',  # Vert clair
                'F': '#228B22'   # Vert plus fonc√©
                    }
                )
                st.plotly_chart(gender_fig, use_container_width=True)

            # R√©partition par type de couverture
            st.header("R√©partition des types de couverture")
            coverage_mapping = {
                1: "Couverture compl√®te",
                2: "Couverture incendie et vol",
                3: "Couverture incendie",
                4: "Indemnisation int√©grale",
                5: "Couverture collision et incendie",
                9: "Autres"
            }
            data['Coverage_Label'] = data['COBERTURA'].map(coverage_mapping)
            coverage_fig = px.pie(data, names='Coverage_Label', title="Types de couverture", hole=0.4,color_discrete_sequence=["#6EAA6B"])
             # Ajouter des options de mise en forme
            coverage_fig.update_traces(textinfo='percent+label')  # Afficher pourcentage + label
            coverage_fig.update_layout(
                legend_title="Types de couverture",  # Titre pour la l√©gende
                height=500,  # Hauteur du graphique
                width=700    # Largeur du graphique
            )
            st.plotly_chart(coverage_fig, use_container_width=True)
            # Ajouter un mapping des causes de sinistres
            causa_mapping = {
                1: "Vol/Rapt",
                2: "Vol",
                3: "Rapt",
                4: "Collision partielle",
                5: "Collision avec indemnisation int√©grale",
                6: "Incendie",
                7: "Assistance 24 heures",
                9: "Autres"
            }

            # Mapper les causes de sinistres
            data['CAUSA_MAPPED'] = data['CAUSA'].map(causa_mapping)

            # Calculer la distribution des causes de sinistres
            cause_distribution = data['CAUSA_MAPPED'].value_counts().reset_index()
            cause_distribution.columns = ['Cause de sinistre', 'Nombre']

            # Cr√©er un graphique circulaire
            cause_pie_chart = px.pie(
                cause_distribution,
                names='Cause de sinistre',
                values='Nombre',
                title="R√©partition des causes de sinistre",
                hole=0.4,color_discrete_sequence=["#6EAA6B"]
            )

            # Ajouter des options de mise en forme
            cause_pie_chart.update_traces(textinfo='percent+label')
            cause_pie_chart.update_layout(
                legend_title="Cause de sinistre",
                height=500,
                width=700
            )

            # Afficher le graphique dans Streamlit
            st.header("R√©partition des causes de sinistre")
            st.plotly_chart(cause_pie_chart, use_container_width=True)

            # **Nombre d'occurrences par groupe (GRUPO)**
            st.header("Mod√®les de v√©hicules")
            group_counts = data['GRUPO'].value_counts().reset_index()
            group_counts.columns = ['GRUPO', 'Nombre']
            group_counts = group_counts.sort_values(by='Nombre', ascending=False)

            # Limiter l'affichage initial aux 10 premiers groupes
            top_10_groups = group_counts.head(10)
            remaining_groups = group_counts.iloc[10:]  # Les groupes restants

            # Cr√©er le graphique pour les 10 premiers groupes
            top_10_fig = px.bar(
                top_10_groups,
                x='Nombre',
                y='GRUPO',
                orientation='h',
                title="Top 10 des mod√®les de v√©hicules assur√©s",
                labels={'Nombre': 'Nombre de v√©hicules', 'GRUPO': 'Groupe'},color_discrete_sequence=["#6EAA6B"]
            )

            top_10_fig.update_layout(
                height=400,
                xaxis=dict(title="Nombre d'√âl√©ments"),
                yaxis=dict(title="Groupe", automargin=True, categoryorder='total ascending')
            )

            # Afficher le graphique des 10 premiers groupes
            st.plotly_chart(top_10_fig, use_container_width=True)
        # **Onglet 3 : Analyse**
        with tabs[2]:
            st.title("Analyse des indemnit√©s")
        # **Onglet 4 : Cartographie**
        with tabs[3]:
            st.header("Visualisation du co√ªt des sinistres par √©tat")
        # **Onglet 6 : Tarification**
        with tabs[4]:
            st.markdown("""
            Cet onglet fournit un outil r√©alisant une tarification simplifi√©e selon une logique de fr√©quence-s√©v√©rit√© avec deux mod√®les XGBOOST.
            """)
            # **Onglet 5 : Interpretation Mod√®le**
        with tabs[5]:
            st.title("Interpretations des Mod√®les")
            st.markdown("""
            Cet onglet affiche les graphiques SHAP (SHapley Additive exPlanations) permettant d'interpr√©ter les contributions des variables dans nos deux mod√®les. Nous mettons en avant uniquement les 10 variables ayant les contributions les plus significatives. Veuillez noter ensuite l'outil d'analyse de d√©pendance SHAP o√π vous pouvez vous m√™me choisir le couple de classe √† √©tudier. Par ailleurs, il est important de noter que l'analyse est r√©alis√©e √† l'√©chelle des classes, afin d'√©viter toute compensation qui pourrait survenir en passant √† une √©chelle plus agr√©g√©e, soit celle des variables individuelles.
            """)
except FileNotFoundError:
    st.error(f"Fichier introuvable : {file_path}. V√©rifiez le chemin.")
except Exception as e:
    st.error(f"Une erreur est survenue : {e}")
